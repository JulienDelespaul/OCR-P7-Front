{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { ClassRegistry } from './class-registry';\nimport { SymbolRegistry } from './symbol-registry';\nimport { CustomTransformerRegistry } from './custom-transformer-registry';\nimport { allowErrorProps } from './error-props';\nimport { walker, applyReferentialEqualityAnnotations, applyValueAnnotations, generateReferentialEqualityAnnotations } from './plainer';\nimport { copy } from 'copy-anything';\nexport var serialize = function (object) {\n  var identities = new Map();\n  var output = walker(object, identities);\n  var res = {\n    json: output.transformedValue\n  };\n\n  if (output.annotations) {\n    res.meta = __assign(__assign({}, res.meta), {\n      values: output.annotations\n    });\n  }\n\n  var equalityAnnotations = generateReferentialEqualityAnnotations(identities);\n\n  if (equalityAnnotations) {\n    res.meta = __assign(__assign({}, res.meta), {\n      referentialEqualities: equalityAnnotations\n    });\n  }\n\n  return res;\n};\nexport var deserialize = function (payload) {\n  var json = payload.json,\n      meta = payload.meta;\n  var result = copy(json);\n\n  if (meta === null || meta === void 0 ? void 0 : meta.values) {\n    result = applyValueAnnotations(result, meta.values);\n  }\n\n  if (meta === null || meta === void 0 ? void 0 : meta.referentialEqualities) {\n    result = applyReferentialEqualityAnnotations(result, meta.referentialEqualities);\n  }\n\n  return result;\n};\nexport var stringify = function (object) {\n  return JSON.stringify(serialize(object));\n};\nexport var parse = function (string) {\n  return deserialize(JSON.parse(string));\n};\nexport var registerClass = function (v, options) {\n  return ClassRegistry.register(v, options);\n};\nexport var registerSymbol = function (v, identifier) {\n  return SymbolRegistry.register(v, identifier);\n};\nexport var registerCustom = function (transformer, name) {\n  return CustomTransformerRegistry.register(__assign({\n    name: name\n  }, transformer));\n};\nexport default {\n  stringify: stringify,\n  parse: parse,\n  serialize: serialize,\n  deserialize: deserialize,\n  registerClass: registerClass,\n  registerSymbol: registerSymbol,\n  registerCustom: registerCustom,\n  allowErrorProps: allowErrorProps\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;AACA,SAASA,aAAT,QAA+C,kBAA/C;AACA,SAASC,cAAT,QAA+B,mBAA/B;AACA,SAEEC,yBAFF,QAGO,+BAHP;AAIA,SAASC,eAAT,QAAgC,eAAhC;AACA,SACEC,MADF,EAEEC,mCAFF,EAGEC,qBAHF,EAIEC,sCAJF,QAKO,WALP;AAMA,SAASC,IAAT,QAAqB,eAArB;AAEA,OAAO,IAAMC,SAAS,GAAG,UAACC,MAAD,EAAuB;EAC9C,IAAMC,UAAU,GAAG,IAAIC,GAAJ,EAAnB;EACA,IAAMC,MAAM,GAAGT,MAAM,CAACM,MAAD,EAASC,UAAT,CAArB;EACA,IAAMG,GAAG,GAAoB;IAC3BC,IAAI,EAAEF,MAAM,CAACG;EADc,CAA7B;;EAIA,IAAIH,MAAM,CAACI,WAAX,EAAwB;IACtBH,GAAG,CAACI,IAAJ,GAAQC,sBACHL,GAAG,CAACI,IADD,GACK;MACXE,MAAM,EAAEP,MAAM,CAACI;IADJ,CADL,CAAR;EAID;;EAED,IAAMI,mBAAmB,GAAGd,sCAAsC,CAChEI,UADgE,CAAlE;;EAGA,IAAIU,mBAAJ,EAAyB;IACvBP,GAAG,CAACI,IAAJ,GAAQC,sBACHL,GAAG,CAACI,IADD,GACK;MACXI,qBAAqB,EAAED;IADZ,CADL,CAAR;EAID;;EAED,OAAOP,GAAP;AACD,CAzBM;AA2BP,OAAO,IAAMS,WAAW,GAAG,UAAcC,OAAd,EAAsC;EACvD,QAAI,GAAWA,OAAO,KAAtB;EAAA,IAAMN,IAAI,GAAKM,OAAO,KAAtB;EAER,IAAIC,MAAM,GAAMjB,IAAI,CAACO,IAAD,CAApB;;EAEA,IAAIG,IAAI,SAAJ,QAAI,WAAJ,GAAI,MAAJ,OAAI,CAAEE,MAAV,EAAkB;IAChBK,MAAM,GAAGnB,qBAAqB,CAACmB,MAAD,EAASP,IAAI,CAACE,MAAd,CAA9B;EACD;;EAED,IAAIF,IAAI,SAAJ,QAAI,WAAJ,GAAI,MAAJ,OAAI,CAAEI,qBAAV,EAAiC;IAC/BG,MAAM,GAAGpB,mCAAmC,CAC1CoB,MAD0C,EAE1CP,IAAI,CAACI,qBAFqC,CAA5C;EAID;;EAED,OAAOG,MAAP;AACD,CAjBM;AAmBP,OAAO,IAAMC,SAAS,GAAG,UAAChB,MAAD,EAAuB;EAC9C,WAAI,CAACgB,SAAL,CAAejB,SAAS,CAACC,MAAD,CAAxB;AAAiC,CAD5B;AAGP,OAAO,IAAMiB,KAAK,GAAG,UAAcC,MAAd,EAA4B;EAC/C,kBAAW,CAACC,IAAI,CAACF,KAAL,CAAWC,MAAX,CAAD,CAAX;AAA+B,CAD1B;AAGP,OAAO,IAAME,aAAa,GAAG,UAACC,CAAD,EAAWC,OAAX,EAA6C;EACxE,oBAAa,CAACC,QAAd,CAAuBF,CAAvB,EAA0BC,OAA1B;AAAkC,CAD7B;AAGP,OAAO,IAAME,cAAc,GAAG,UAACH,CAAD,EAAYI,UAAZ,EAA+B;EAC3D,qBAAc,CAACF,QAAf,CAAwBF,CAAxB,EAA2BI,UAA3B;AAAsC,CADjC;AAGP,OAAO,IAAMC,cAAc,GAAG,UAC5BC,WAD4B,EAE5BC,IAF4B,EAEhB;EAEZ,gCAAyB,CAACL,QAA1B,CAAkCd;IAChCmB,IAAI;EAD4B,GAE7BD,WAF6B,CAAlC;AAGE,CAPG;AASP,eAAe;EACbX,SAAS,WADI;EAEbC,KAAK,OAFQ;EAGblB,SAAS,WAHI;EAIbc,WAAW,aAJE;EAKbO,aAAa,eALA;EAMbI,cAAc,gBAND;EAObE,cAAc,gBAPD;EAQbjC,eAAe;AARF,CAAf","names":["ClassRegistry","SymbolRegistry","CustomTransformerRegistry","allowErrorProps","walker","applyReferentialEqualityAnnotations","applyValueAnnotations","generateReferentialEqualityAnnotations","copy","serialize","object","identities","Map","output","res","json","transformedValue","annotations","meta","__assign","values","equalityAnnotations","referentialEqualities","deserialize","payload","result","stringify","parse","string","JSON","registerClass","v","options","register","registerSymbol","identifier","registerCustom","transformer","name"],"sources":["/home/julien/Dropbox/Formation OpenClassroom/Projet 7/code/FRONTEND/node_modules/superjson/src/index.ts"],"sourcesContent":["import { SuperJSONResult, SuperJSONValue, Class, JSONValue } from './types';\nimport { ClassRegistry, RegisterOptions } from './class-registry';\nimport { SymbolRegistry } from './symbol-registry';\nimport {\n  CustomTransfomer,\n  CustomTransformerRegistry,\n} from './custom-transformer-registry';\nimport { allowErrorProps } from './error-props';\nimport {\n  walker,\n  applyReferentialEqualityAnnotations,\n  applyValueAnnotations,\n  generateReferentialEqualityAnnotations,\n} from './plainer';\nimport { copy } from 'copy-anything';\n\nexport const serialize = (object: SuperJSONValue): SuperJSONResult => {\n  const identities = new Map<any, any[][]>();\n  const output = walker(object, identities);\n  const res: SuperJSONResult = {\n    json: output.transformedValue,\n  };\n\n  if (output.annotations) {\n    res.meta = {\n      ...res.meta,\n      values: output.annotations,\n    };\n  }\n\n  const equalityAnnotations = generateReferentialEqualityAnnotations(\n    identities\n  );\n  if (equalityAnnotations) {\n    res.meta = {\n      ...res.meta,\n      referentialEqualities: equalityAnnotations,\n    };\n  }\n\n  return res;\n};\n\nexport const deserialize = <T = unknown>(payload: SuperJSONResult): T => {\n  const { json, meta } = payload;\n\n  let result: T = copy(json) as any;\n\n  if (meta?.values) {\n    result = applyValueAnnotations(result, meta.values);\n  }\n\n  if (meta?.referentialEqualities) {\n    result = applyReferentialEqualityAnnotations(\n      result,\n      meta.referentialEqualities\n    );\n  }\n\n  return result;\n};\n\nexport const stringify = (object: SuperJSONValue): string =>\n  JSON.stringify(serialize(object));\n\nexport const parse = <T = unknown>(string: string): T =>\n  deserialize(JSON.parse(string));\n\nexport const registerClass = (v: Class, options?: RegisterOptions | string) =>\n  ClassRegistry.register(v, options);\n\nexport const registerSymbol = (v: Symbol, identifier?: string) =>\n  SymbolRegistry.register(v, identifier);\n\nexport const registerCustom = <I, O extends JSONValue>(\n  transformer: Omit<CustomTransfomer<I, O>, 'name'>,\n  name: string\n) =>\n  CustomTransformerRegistry.register({\n    name,\n    ...transformer,\n  });\n\nexport default {\n  stringify,\n  parse,\n  serialize,\n  deserialize,\n  registerClass,\n  registerSymbol,\n  registerCustom,\n  allowErrorProps,\n};\n"]},"metadata":{},"sourceType":"module"}