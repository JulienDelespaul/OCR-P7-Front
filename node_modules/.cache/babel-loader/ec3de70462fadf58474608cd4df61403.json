{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nfunction valuesOfObj(record) {\n  if ('values' in Object) {\n    // eslint-disable-next-line es5/no-es6-methods\n    return Object.values(record);\n  }\n\n  var values = []; // eslint-disable-next-line no-restricted-syntax\n\n  for (var key in record) {\n    if (record.hasOwnProperty(key)) {\n      values.push(record[key]);\n    }\n  }\n\n  return values;\n}\n\nexport function find(record, predicate) {\n  var values = valuesOfObj(record);\n\n  if ('find' in values) {\n    // eslint-disable-next-line es5/no-es6-methods\n    return values.find(predicate);\n  }\n\n  var valuesNotNever = values;\n\n  for (var i = 0; i < valuesNotNever.length; i++) {\n    var value = valuesNotNever[i];\n\n    if (predicate(value)) {\n      return value;\n    }\n  }\n\n  return undefined;\n}\nexport function forEach(record, run) {\n  Object.entries(record).forEach(function (_a) {\n    var _b = __read(_a, 2),\n        key = _b[0],\n        value = _b[1];\n\n    return run(value, key);\n  });\n}\nexport function includes(arr, value) {\n  return arr.indexOf(value) !== -1;\n}\nexport function findArr(record, predicate) {\n  for (var i = 0; i < record.length; i++) {\n    var value = record[i];\n\n    if (predicate(value)) {\n      return value;\n    }\n  }\n\n  return undefined;\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,WAAT,CAAwBC,MAAxB,EAAiD;EAC/C,IAAI,YAAYC,MAAhB,EAAwB;IACtB;IACA,OAAOA,MAAM,CAACC,MAAP,CAAcF,MAAd,CAAP;EACD;;EAED,IAAME,MAAM,GAAQ,EAApB,CAN+C,CAQ/C;;EACA,KAAK,IAAMC,GAAX,IAAkBH,MAAlB,EAA0B;IACxB,IAAIA,MAAM,CAACI,cAAP,CAAsBD,GAAtB,CAAJ,EAAgC;MAC9BD,MAAM,CAACG,IAAP,CAAYL,MAAM,CAACG,GAAD,CAAlB;IACD;EACF;;EAED,OAAOD,MAAP;AACD;;AAED,OAAM,SAAUI,IAAV,CACJN,MADI,EAEJO,SAFI,EAEwB;EAE5B,IAAML,MAAM,GAAGH,WAAW,CAACC,MAAD,CAA1B;;EACA,IAAI,UAAUE,MAAd,EAAsB;IACpB;IACA,OAAOA,MAAM,CAACI,IAAP,CAAYC,SAAZ,CAAP;EACD;;EAED,IAAMC,cAAc,GAAGN,MAAvB;;EAEA,KAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,cAAc,CAACE,MAAnC,EAA2CD,CAAC,EAA5C,EAAgD;IAC9C,IAAME,KAAK,GAAGH,cAAc,CAACC,CAAD,CAA5B;;IACA,IAAIF,SAAS,CAACI,KAAD,CAAb,EAAsB;MACpB,OAAOA,KAAP;IACD;EACF;;EAED,OAAOC,SAAP;AACD;AAED,OAAM,SAAUC,OAAV,CACJb,MADI,EAEJc,GAFI,EAE4B;EAEhCb,MAAM,CAACc,OAAP,CAAef,MAAf,EAAuBa,OAAvB,CAA+B,UAACG,EAAD,EAAa;QAAZC;QAACd,GAAG;QAAEQ,KAAK;;IAAM,UAAG,CAACA,KAAD,EAAQR,GAAR,CAAH;EAAe,CAAhE;AACD;AAED,OAAM,SAAUe,QAAV,CAAsBC,GAAtB,EAAgCR,KAAhC,EAAwC;EAC5C,OAAOQ,GAAG,CAACC,OAAJ,CAAYT,KAAZ,MAAuB,CAAC,CAA/B;AACD;AAED,OAAM,SAAUU,OAAV,CACJrB,MADI,EAEJO,SAFI,EAEwB;EAE5B,KAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,MAAM,CAACU,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;IACtC,IAAME,KAAK,GAAGX,MAAM,CAACS,CAAD,CAApB;;IACA,IAAIF,SAAS,CAACI,KAAD,CAAb,EAAsB;MACpB,OAAOA,KAAP;IACD;EACF;;EAED,OAAOC,SAAP;AACD","names":["valuesOfObj","record","Object","values","key","hasOwnProperty","push","find","predicate","valuesNotNever","i","length","value","undefined","forEach","run","entries","_a","_b","includes","arr","indexOf","findArr"],"sources":["/home/julien/Bureau/P7 Front/OCR-P7-Front/node_modules/superjson/src/util.ts"],"sourcesContent":["function valuesOfObj<T>(record: Record<string, T>): T[] {\n  if ('values' in Object) {\n    // eslint-disable-next-line es5/no-es6-methods\n    return Object.values(record);\n  }\n\n  const values: T[] = [];\n\n  // eslint-disable-next-line no-restricted-syntax\n  for (const key in record) {\n    if (record.hasOwnProperty(key)) {\n      values.push(record[key]);\n    }\n  }\n\n  return values;\n}\n\nexport function find<T>(\n  record: Record<string, T>,\n  predicate: (v: T) => boolean\n): T | undefined {\n  const values = valuesOfObj(record);\n  if ('find' in values) {\n    // eslint-disable-next-line es5/no-es6-methods\n    return values.find(predicate);\n  }\n\n  const valuesNotNever = values as T[];\n\n  for (let i = 0; i < valuesNotNever.length; i++) {\n    const value = valuesNotNever[i];\n    if (predicate(value)) {\n      return value;\n    }\n  }\n\n  return undefined;\n}\n\nexport function forEach<T>(\n  record: Record<string, T>,\n  run: (v: T, key: string) => void\n) {\n  Object.entries(record).forEach(([key, value]) => run(value, key));\n}\n\nexport function includes<T>(arr: T[], value: T) {\n  return arr.indexOf(value) !== -1;\n}\n\nexport function findArr<T>(\n  record: T[],\n  predicate: (v: T) => boolean\n): T | undefined {\n  for (let i = 0; i < record.length; i++) {\n    const value = record[i];\n    if (predicate(value)) {\n      return value;\n    }\n  }\n\n  return undefined;\n}\n"]},"metadata":{},"sourceType":"module"}