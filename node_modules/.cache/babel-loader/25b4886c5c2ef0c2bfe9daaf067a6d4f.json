{"ast":null,"code":"var getType = function (payload) {\n  return Object.prototype.toString.call(payload).slice(8, -1);\n};\n\nexport var isUndefined = function (payload) {\n  return typeof payload === 'undefined';\n};\nexport var isNull = function (payload) {\n  return payload === null;\n};\nexport var isPlainObject = function (payload) {\n  if (typeof payload !== 'object' || payload === null) return false;\n  if (payload === Object.prototype) return false;\n  if (Object.getPrototypeOf(payload) === null) return true;\n  return payload.constructor === Object && Object.getPrototypeOf(payload) === Object.prototype;\n};\nexport var isEmptyObject = function (payload) {\n  return isPlainObject(payload) && Object.keys(payload).length === 0;\n};\nexport var isArray = function (payload) {\n  return Array.isArray(payload);\n};\nexport var isString = function (payload) {\n  return typeof payload === 'string';\n};\nexport var isNumber = function (payload) {\n  return typeof payload === 'number' && !isNaN(payload);\n};\nexport var isBoolean = function (payload) {\n  return typeof payload === 'boolean';\n};\nexport var isRegExp = function (payload) {\n  return payload instanceof RegExp;\n};\nexport var isMap = function (payload) {\n  return payload instanceof Map;\n};\nexport var isSet = function (payload) {\n  return payload instanceof Set;\n};\nexport var isSymbol = function (payload) {\n  return getType(payload) === 'Symbol';\n};\nexport var isDate = function (payload) {\n  return payload instanceof Date && !isNaN(payload.valueOf());\n};\nexport var isError = function (payload) {\n  return payload instanceof Error;\n};\nexport var isNaNValue = function (payload) {\n  return typeof payload === 'number' && isNaN(payload);\n};\nexport var isPrimitive = function (payload) {\n  return isBoolean(payload) || isNull(payload) || isUndefined(payload) || isNumber(payload) || isString(payload) || isSymbol(payload);\n};\nexport var isBigint = function (payload) {\n  return typeof payload === 'bigint';\n};\nexport var isInfinite = function (payload) {\n  return payload === Infinity || payload === -Infinity;\n};\nexport var isTypedArray = function (payload) {\n  return ArrayBuffer.isView(payload) && !(payload instanceof DataView);\n};\nexport var isURL = function (payload) {\n  return payload instanceof URL;\n};","map":{"version":3,"mappings":"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","names":["getType","payload","prototype","toString","call","slice","isUndefined","isNull","isPlainObject","Object","getPrototypeOf","constructor","isEmptyObject","keys","length","isArray","isString","isNumber","isNaN","isBoolean","isRegExp","RegExp","isMap","Map","isSet","Set","isSymbol","isDate","Date","valueOf","isError","Error","isNaNValue","isPrimitive","isBigint","isInfinite","Infinity","isTypedArray","isView","DataView","isURL","URL"],"sources":["/home/julien/Dropbox/Formation OpenClassroom/Projet 7/code/FRONTEND/node_modules/superjson/src/is.ts"],"sourcesContent":["const getType = (payload: any): string =>\n  Object.prototype.toString.call(payload).slice(8, -1);\n\nexport const isUndefined = (payload: any): payload is undefined =>\n  typeof payload === 'undefined';\n\nexport const isNull = (payload: any): payload is null => payload === null;\n\nexport const isPlainObject = (\n  payload: any\n): payload is { [key: string]: any } => {\n  if (typeof payload !== 'object' || payload === null) return false;\n  if (payload === Object.prototype) return false;\n  if (Object.getPrototypeOf(payload) === null) return true;\n\n  return (\n    payload.constructor === Object &&\n    Object.getPrototypeOf(payload) === Object.prototype\n  );\n};\n\nexport const isEmptyObject = (payload: any): payload is {} =>\n  isPlainObject(payload) && Object.keys(payload).length === 0;\n\nexport const isArray = (payload: any): payload is any[] =>\n  Array.isArray(payload);\n\nexport const isString = (payload: any): payload is string =>\n  typeof payload === 'string';\n\nexport const isNumber = (payload: any): payload is number =>\n  typeof payload === 'number' && !isNaN(payload);\n\nexport const isBoolean = (payload: any): payload is boolean =>\n  typeof payload === 'boolean';\n\nexport const isRegExp = (payload: any): payload is RegExp =>\n  payload instanceof RegExp;\n\nexport const isMap = (payload: any): payload is Map<any, any> =>\n  payload instanceof Map;\n\nexport const isSet = (payload: any): payload is Set<any> =>\n  payload instanceof Set;\n\nexport const isSymbol = (payload: any): payload is symbol =>\n  getType(payload) === 'Symbol';\n\nexport const isDate = (payload: any): payload is Date =>\n  payload instanceof Date && !isNaN(payload.valueOf());\n\nexport const isError = (payload: any): payload is Error =>\n  payload instanceof Error;\n\nexport const isNaNValue = (payload: any): payload is typeof NaN =>\n  typeof payload === 'number' && isNaN(payload);\n\nexport const isPrimitive = (\n  payload: any\n): payload is boolean | null | undefined | number | string | symbol =>\n  isBoolean(payload) ||\n  isNull(payload) ||\n  isUndefined(payload) ||\n  isNumber(payload) ||\n  isString(payload) ||\n  isSymbol(payload);\n\nexport const isBigint = (payload: any): payload is bigint =>\n  typeof payload === 'bigint';\n\nexport const isInfinite = (payload: any): payload is number =>\n  payload === Infinity || payload === -Infinity;\n\nexport type TypedArrayConstructor =\n  | Int8ArrayConstructor\n  | Uint8ArrayConstructor\n  | Uint8ClampedArrayConstructor\n  | Int16ArrayConstructor\n  | Uint16ArrayConstructor\n  | Int32ArrayConstructor\n  | Uint32ArrayConstructor\n  | Float32ArrayConstructor\n  | Float64ArrayConstructor;\n\nexport type TypedArray = InstanceType<TypedArrayConstructor>;\n\nexport const isTypedArray = (payload: any): payload is TypedArray =>\n  ArrayBuffer.isView(payload) && !(payload instanceof DataView);\n\nexport const isURL = (payload: any): payload is URL => payload instanceof URL;\n"]},"metadata":{},"sourceType":"module"}