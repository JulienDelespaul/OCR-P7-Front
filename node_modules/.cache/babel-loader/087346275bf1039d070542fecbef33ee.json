{"ast":null,"code":"import { isMap, isArray, isPlainObject, isSet } from './is';\nimport { includes } from './util';\n\nvar getNthKey = function (value, n) {\n  var keys = value.keys();\n\n  while (n > 0) {\n    keys.next();\n    n--;\n  }\n\n  return keys.next().value;\n};\n\nfunction validatePath(path) {\n  if (includes(path, '__proto__')) {\n    throw new Error('__proto__ is not allowed as a property');\n  }\n\n  if (includes(path, 'prototype')) {\n    throw new Error('prototype is not allowed as a property');\n  }\n\n  if (includes(path, 'constructor')) {\n    throw new Error('constructor is not allowed as a property');\n  }\n}\n\nexport var getDeep = function (object, path) {\n  validatePath(path);\n  path.forEach(function (key) {\n    object = object[key];\n  });\n  return object;\n};\nexport var setDeep = function (object, path, mapper) {\n  validatePath(path);\n\n  if (path.length === 0) {\n    return mapper(object);\n  }\n\n  var parent = object;\n\n  for (var i = 0; i < path.length - 1; i++) {\n    var key = path[i];\n\n    if (isArray(parent)) {\n      var index = +key;\n      parent = parent[index];\n    } else if (isPlainObject(parent)) {\n      parent = parent[key];\n    } else if (isSet(parent)) {\n      var row = +key;\n      parent = getNthKey(parent, row);\n    } else if (isMap(parent)) {\n      var isEnd = i === path.length - 2;\n\n      if (isEnd) {\n        break;\n      }\n\n      var row = +key;\n      var type = +path[++i] === 0 ? 'key' : 'value';\n      var keyOfRow = getNthKey(parent, row);\n\n      switch (type) {\n        case 'key':\n          parent = keyOfRow;\n          break;\n\n        case 'value':\n          parent = parent.get(keyOfRow);\n          break;\n      }\n    }\n  }\n\n  var lastKey = path[path.length - 1];\n\n  if (isArray(parent) || isPlainObject(parent)) {\n    parent[lastKey] = mapper(parent[lastKey]);\n  }\n\n  if (isSet(parent)) {\n    var oldValue = getNthKey(parent, +lastKey);\n    var newValue = mapper(oldValue);\n\n    if (oldValue !== newValue) {\n      parent[\"delete\"](oldValue);\n      parent.add(newValue);\n    }\n  }\n\n  if (isMap(parent)) {\n    var row = +path[path.length - 2];\n    var keyToRow = getNthKey(parent, row);\n    var type = +lastKey === 0 ? 'key' : 'value';\n\n    switch (type) {\n      case 'key':\n        {\n          var newKey = mapper(keyToRow);\n          parent.set(newKey, parent.get(keyToRow));\n\n          if (newKey !== keyToRow) {\n            parent[\"delete\"](keyToRow);\n          }\n\n          break;\n        }\n\n      case 'value':\n        {\n          parent.set(keyToRow, mapper(parent.get(keyToRow)));\n          break;\n        }\n    }\n  }\n\n  return object;\n};","map":{"version":3,"mappings":"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","names":["isMap","isArray","isPlainObject","isSet","includes","getNthKey","value","n","keys","next","validatePath","path","Error","getDeep","object","forEach","key","setDeep","mapper","length","parent","i","index","row","isEnd","type","keyOfRow","get","lastKey","oldValue","newValue","add","keyToRow","newKey","set"],"sources":["/home/julien/Dropbox/Formation OpenClassroom/Projet 7/code/FRONTEND/node_modules/superjson/src/accessDeep.ts"],"sourcesContent":["import { isMap, isArray, isPlainObject, isSet } from './is';\nimport { includes } from './util';\n\nconst getNthKey = (value: Map<any, any> | Set<any>, n: number): any => {\n  const keys = value.keys();\n  while (n > 0) {\n    keys.next();\n    n--;\n  }\n\n  return keys.next().value;\n};\n\nfunction validatePath(path: (string | number)[]) {\n  if (includes(path, '__proto__')) {\n    throw new Error('__proto__ is not allowed as a property');\n  }\n  if (includes(path, 'prototype')) {\n    throw new Error('prototype is not allowed as a property');\n  }\n  if (includes(path, 'constructor')) {\n    throw new Error('constructor is not allowed as a property');\n  }\n}\n\nexport const getDeep = (object: object, path: (string | number)[]): object => {\n  validatePath(path);\n\n  path.forEach(key => {\n    object = (object as any)[key];\n  });\n\n  return object;\n};\n\nexport const setDeep = (\n  object: any,\n  path: (string | number)[],\n  mapper: (v: any) => any\n): any => {\n  validatePath(path);\n\n  if (path.length === 0) {\n    return mapper(object);\n  }\n\n  let parent = object;\n\n  for (let i = 0; i < path.length - 1; i++) {\n    const key = path[i];\n\n    if (isArray(parent)) {\n      const index = +key;\n      parent = parent[index];\n    } else if (isPlainObject(parent)) {\n      parent = parent[key];\n    } else if (isSet(parent)) {\n      const row = +key;\n      parent = getNthKey(parent, row);\n    } else if (isMap(parent)) {\n      const isEnd = i === path.length - 2;\n      if (isEnd) {\n        break;\n      }\n\n      const row = +key;\n      const type = +path[++i] === 0 ? 'key' : 'value';\n\n      const keyOfRow = getNthKey(parent, row);\n      switch (type) {\n        case 'key':\n          parent = keyOfRow;\n          break;\n        case 'value':\n          parent = parent.get(keyOfRow);\n          break;\n      }\n    }\n  }\n\n  const lastKey = path[path.length - 1];\n\n  if (isArray(parent) || isPlainObject(parent)) {\n    parent[lastKey] = mapper(parent[lastKey]);\n  }\n\n  if (isSet(parent)) {\n    const oldValue = getNthKey(parent, +lastKey);\n    const newValue = mapper(oldValue);\n    if (oldValue !== newValue) {\n      parent.delete(oldValue);\n      parent.add(newValue);\n    }\n  }\n\n  if (isMap(parent)) {\n    const row = +path[path.length - 2];\n    const keyToRow = getNthKey(parent, row);\n\n    const type = +lastKey === 0 ? 'key' : 'value';\n    switch (type) {\n      case 'key': {\n        const newKey = mapper(keyToRow);\n        parent.set(newKey, parent.get(keyToRow));\n\n        if (newKey !== keyToRow) {\n          parent.delete(keyToRow);\n        }\n        break;\n      }\n\n      case 'value': {\n        parent.set(keyToRow, mapper(parent.get(keyToRow)));\n        break;\n      }\n    }\n  }\n\n  return object;\n};\n"]},"metadata":{},"sourceType":"module"}